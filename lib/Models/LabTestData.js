
/**
 * HealthOSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
var BaseModel = require("./BaseModel");

/**
 * Creates an instance of LabTestData
 *
 * @constructor
 */
LabTestData = function (obj) {
    if(!obj) {
        this.orderingInformation = null;     
        this.alternateNames = null;     
        this.laboratory = null;     
        this.testCode = null;     
        this.specimenTypes = null;     
        this.containerTypes = null;     
        this.minimumAdultVolume = null;     
        this.frequency = null;     
        this.externalLaboratory = null;     
        //Append to variable dictionary
        this._variableDict['orderingInformation'] = 'Ordering information';
        this._variableDict['alternateNames'] = 'Alternate names';
        this._variableDict['laboratory'] = 'Laboratory';
        this._variableDict['testCode'] = 'Test Code';
        this._variableDict['specimenTypes'] = 'Specimen types';
        this._variableDict['containerTypes'] = 'Container types';
        this._variableDict['minimumAdultVolume'] = 'Minimum Adult Volume';
        this._variableDict['frequency'] = 'Frequency';
        this._variableDict['externalLaboratory'] = 'External Laboratory';
    } else {
        this.orderingInformation = (obj.Orderinginformation !== undefined && obj.Orderinginformation !== null)? obj.Orderinginformation : null;
        this.alternateNames = (obj.Alternatenames !== undefined && obj.Alternatenames !== null)? obj.Alternatenames : null;
        this.laboratory = (obj.Laboratory !== undefined && obj.Laboratory !== null)? obj.Laboratory : null;
        this.testCode = (obj.TestCode !== undefined && obj.TestCode !== null)? obj.TestCode : null;
        this.specimenTypes = (obj.Specimentypes !== undefined && obj.Specimentypes !== null)? obj.Specimentypes : null;
        this.containerTypes = (obj.Containertypes !== undefined && obj.Containertypes !== null)? obj.Containertypes : null;
        this.minimumAdultVolume = (obj.MinimumAdultVolume !== undefined && obj.MinimumAdultVolume !== null)? obj.MinimumAdultVolume : null;
        this.frequency = (obj.Frequency !== undefined && obj.Frequency !== null)? obj.Frequency : null;
        this.externalLaboratory = (obj.ExternalLaboratory !== undefined && obj.ExternalLaboratory !== null)? obj.ExternalLaboratory : null;
        //Append to variable dictionary
        this._variableDict['orderingInformation'] = 'Ordering information';
        this._variableDict['alternateNames'] = 'Alternate names';
        this._variableDict['laboratory'] = 'Laboratory';
        this._variableDict['testCode'] = 'Test Code';
        this._variableDict['specimenTypes'] = 'Specimen types';
        this._variableDict['containerTypes'] = 'Container types';
        this._variableDict['minimumAdultVolume'] = 'Minimum Adult Volume';
        this._variableDict['frequency'] = 'Frequency';
        this._variableDict['externalLaboratory'] = 'External Laboratory';
    }
};

LabTestData.prototype = new BaseModel();
LabTestData.prototype.constructor = LabTestData;

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getOrderingInformation = function() {
    return this.orderingInformation;
};

/**
 * Setter for OrderingInformation
 * 
 * @param {string} value 
 */
LabTestData.prototype.setOrderingInformation = function(value) {
    this.orderingInformation = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getAlternateNames = function() {
    return this.alternateNames;
};

/**
 * Setter for AlternateNames
 * 
 * @param {string} value 
 */
LabTestData.prototype.setAlternateNames = function(value) {
    this.alternateNames = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getLaboratory = function() {
    return this.laboratory;
};

/**
 * Setter for Laboratory
 * 
 * @param {string} value 
 */
LabTestData.prototype.setLaboratory = function(value) {
    this.laboratory = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getTestCode = function() {
    return this.testCode;
};

/**
 * Setter for TestCode
 * 
 * @param {string} value 
 */
LabTestData.prototype.setTestCode = function(value) {
    this.testCode = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getSpecimenTypes = function() {
    return this.specimenTypes;
};

/**
 * Setter for SpecimenTypes
 * 
 * @param {string} value 
 */
LabTestData.prototype.setSpecimenTypes = function(value) {
    this.specimenTypes = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getContainerTypes = function() {
    return this.containerTypes;
};

/**
 * Setter for ContainerTypes
 * 
 * @param {string} value 
 */
LabTestData.prototype.setContainerTypes = function(value) {
    this.containerTypes = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getMinimumAdultVolume = function() {
    return this.minimumAdultVolume;
};

/**
 * Setter for MinimumAdultVolume
 * 
 * @param {string} value 
 */
LabTestData.prototype.setMinimumAdultVolume = function(value) {
    this.minimumAdultVolume = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getFrequency = function() {
    return this.frequency;
};

/**
 * Setter for Frequency
 * 
 * @param {string} value 
 */
LabTestData.prototype.setFrequency = function(value) {
    this.frequency = value;
};

/**
 * TODO: Write general description for this method
 *
 * @return {string}
 */
LabTestData.prototype.getExternalLaboratory = function() {
    return this.externalLaboratory;
};

/**
 * Setter for ExternalLaboratory
 * 
 * @param {string} value 
 */
LabTestData.prototype.setExternalLaboratory = function(value) {
    this.externalLaboratory = value;
};


module.exports = LabTestData;
